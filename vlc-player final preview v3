import { useState, useRef, useEffect } from 'react';

type VideoFile = {
  name: string;
  file: File;
  url: string;
};

// Custom SVG icons
const PlayIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
    <polygon points="5 3 19 12 5 21 5 3" />
  </svg>
);

const PauseIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
    <rect x="6" y="4" width="4" height="16" />
    <rect x="14" y="4" width="4" height="16" />
  </svg>
);

const StopIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
    <rect x="4" y="4" width="16" height="16" rx="1" />
  </svg>
);

const SkipForwardIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
    <polygon points="13 19 22 12 13 5 13 19" />
    <polygon points="2 19 11 12 2 5 2 19" />
  </svg>
);

const VolumeIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
    <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" />
  </svg>
);

const MaximizeIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
    <path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3" />
  </svg>
);

const SpeedIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
    <path d="M12 19a7 7 0 1 0 0-14 7 7 0 0 0 0 14z" />
    <path d="M12 12v5" />
    <path d="M12 12l3-3" />
  </svg>
);

const ChevronDownIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
    <path d="m6 9 6 6 6-6" />
  </svg>
);

export default function VLCPlayer() {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [volume, setVolume] = useState(0.8);
  const [playlist, setPlaylist] = useState<VideoFile[]>([]);
  const [currentVideoIndex, setCurrentVideoIndex] = useState(0);
  const [playbackRate, setPlaybackRate] = useState(1);
  const [showSpeedMenu, setShowSpeedMenu] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const speedMenuRef = useRef<HTMLDivElement>(null);

  const speedOptions = [0.5, 1, 1.25, 1.5, 2, 3, 4];

  // Close speed menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (speedMenuRef.current && !speedMenuRef.current.contains(event.target as Node)) {
        setShowSpeedMenu(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Handle file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const newFiles = Array.from(e.target.files).map(file => ({
        name: file.name,
        file,
        url: URL.createObjectURL(file)
      }));
      
      setPlaylist(prev => [...prev, ...newFiles]);
      
      if (playlist.length === 0 && newFiles.length > 0) {
        setCurrentVideoIndex(0);
        setIsPlaying(true);
      }
    }
  };

  // Play/pause toggle
  const togglePlayPause = () => {
    if (!videoRef.current || playlist.length === 0) return;
    
    if (isPlaying) {
      videoRef.current.pause();
    } else {
      videoRef.current.play().catch(e => {
        console.error("Playback failed:", e);
      });
    }
    setIsPlaying(!isPlaying);
  };

  // Stop playback
  const handleStop = () => {
    if (videoRef.current) {
      videoRef.current.pause();
      videoRef.current.currentTime = 0;
      setIsPlaying(false);
      setCurrentTime(0);
    }
  };

  // Play next video in playlist
  const playNextVideo = () => {
    if (playlist.length === 0) return;
    
    const nextIndex = (currentVideoIndex + 1) % playlist.length;
    setCurrentVideoIndex(nextIndex);
    setIsPlaying(true);
  };

  // Handle seeking
  const handleSeek = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newTime = parseFloat(e.target.value);
    if (videoRef.current) {
      videoRef.current.currentTime = newTime;
      setCurrentTime(newTime);
    }
  };

  // Handle volume change
  const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newVolume = parseFloat(e.target.value);
    if (videoRef.current) {
      videoRef.current.volume = newVolume;
    }
    setVolume(newVolume);
  };

  // Change playback speed
  const changePlaybackSpeed = (speed: number) => {
    if (videoRef.current) {
      videoRef.current.playbackRate = speed;
      setPlaybackRate(speed);
      setShowSpeedMenu(false);
    }
  };

  // Toggle speed menu
  const toggleSpeedMenu = () => {
    setShowSpeedMenu(!showSpeedMenu);
  };

  // Update current time during playback
  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    const updateTime = () => setCurrentTime(video.currentTime);
    const updateDuration = () => setDuration(video.duration || 0);

    video.addEventListener('timeupdate', updateTime);
    video.addEventListener('loadedmetadata', updateDuration);
    video.addEventListener('ended', playNextVideo);

    return () => {
      video.removeEventListener('timeupdate', updateTime);
      video.removeEventListener('loadedmetadata', updateDuration);
      video.removeEventListener('ended', playNextVideo);
    };
  }, [currentVideoIndex, playlist]);

  // Auto-play when current video changes
  useEffect(() => {
    if (videoRef.current && playlist.length > 0 && isPlaying) {
      videoRef.current.playbackRate = playbackRate;
      videoRef.current.play().catch(e => {
        console.error("Autoplay prevented:", e);
        setIsPlaying(false);
      });
    }
  }, [currentVideoIndex, playlist, playbackRate]);

  // Format time (seconds to MM:SS)
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };

  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-md overflow-hidden">
        <div className="p-4 border-b">
          <h1 className="text-2xl font-bold text-gray-800">VLC Player Clone</h1>
        </div>
        
        {/* Video Player */}
        <div className="bg-black aspect-video flex items-center justify-center">
          {playlist.length > 0 ? (
            <video
              ref={videoRef}
              src={playlist[currentVideoIndex]?.url}
              className="w-full h-full"
              onClick={togglePlayPause}
            />
          ) : (
            <div className="text-white text-center p-4">
              <div className="text-xl">No video selected</div>
              <div className="text-gray-400">Select video files to play</div>
            </div>
          )}
        </div>

        {/* Progress Bar */}
        <div className="p-4">
          <div className="mb-2">
            <input
              type="range"
              min="0"
              max={duration || 100}
              value={currentTime}
              onChange={handleSeek}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
              disabled={playlist.length === 0}
            />
          </div>
          <div className="flex justify-between text-sm text-gray-600">
            <span>{formatTime(currentTime)}</span>
            <span>{formatTime(duration)}</span>
          </div>
        </div>

        {/* Controls */}
        <div className="p-4 border-t flex items-center justify-between">
          <div className="flex space-x-2">
            <button
              onClick={togglePlayPause}
              disabled={playlist.length === 0}
              className="p-2 rounded-full bg-gray-200 hover:bg-gray-300 disabled:opacity-50"
            >
              {isPlaying ? <PauseIcon /> : <PlayIcon />}
            </button>
            <button
              onClick={handleStop}
              disabled={playlist.length === 0}
              className="p-2 rounded-full bg-gray-200 hover:bg-gray-300 disabled:opacity-50"
            >
              <StopIcon />
            </button>
            <button
              onClick={playNextVideo}
              disabled={playlist.length === 0}
              className="p-2 rounded-full bg-gray-200 hover:bg-gray-300 disabled:opacity-50"
            >
              <SkipForwardIcon />
            </button>
          </div>

          {/* Speed Control Dropdown */}
          <div className="relative" ref={speedMenuRef}>
            <button
              onClick={toggleSpeedMenu}
              disabled={playlist.length === 0}
              className="flex items-center space-x-1 px-3 py-1 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50"
            >
              <SpeedIcon />
              <span>{playbackRate}X</span>
              <ChevronDownIcon />
            </button>
            {showSpeedMenu && (
              <div className="absolute bottom-full mb-2 left-0 bg-white rounded-md shadow-lg z-10 w-32">
                {speedOptions.map(speed => (
                  <button
                    key={speed}
                    onClick={() => changePlaybackSpeed(speed)}
                    className={`w-full text-left px-3 py-2 text-sm ${
                      playbackRate === speed 
                        ? 'bg-blue-500 text-white' 
                        : 'hover:bg-gray-100'
                    }`}
                  >
                    {speed}X
                  </button>
                ))}
              </div>
            )}
          </div>

          <div className="flex items-center space-x-2 w-32">
            <VolumeIcon />
            <input
              type="range"
              min="0"
              max="1"
              step="0.01"
              value={volume}
              onChange={handleVolumeChange}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
            />
          </div>

          <button className="p-2 rounded-full bg-gray-200 hover:bg-gray-300">
            <MaximizeIcon />
          </button>
        </div>

        {/* File Input */}
        <div className="p-4 border-t">
          <label className="flex flex-col items-center px-4 py-6 bg-gray-50 rounded-lg border border-dashed cursor-pointer hover:bg-gray-100">
            <span className="text-sm font-medium text-gray-700">Select video files</span>
            <span className="text-xs text-gray-500">Supports MP4, WebM, Ogg</span>
            <input 
              type="file" 
              className="hidden" 
              accept="video/*" 
              multiple
              onChange={handleFileChange}
            />
          </label>
        </div>

        {/* Playlist */}
        {playlist.length > 0 && (
          <div className="p-4 border-t">
            <h3 className="font-medium text-gray-700 mb-2">Playlist ({playlist.length} videos)</h3>
            <div className="border rounded-lg divide-y max-h-60 overflow-y-auto">
              {playlist.map((video, index) => (
                <div 
                  key={index}
                  className={`p-3 cursor-pointer hover:bg-gray-50 flex items-center ${currentVideoIndex === index ? 'bg-blue-50' : ''}`}
                  onClick={() => {
                    setCurrentVideoIndex(index);
                    setIsPlaying(true);
                  }}
                >
                  <div className="bg-gray-200 border-2 border-dashed rounded-xl w-10 h-10 flex items-center justify-center mr-3">
                    🎬
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="font-medium truncate text-gray-800">{video.name}</div>
                    <div className="text-sm text-gray-500 truncate">Video file</div>
                  </div>
                  {currentVideoIndex === index && (
                    <div className="text-xs text-blue-600 ml-2">
                      {isPlaying ? 'Playing' : 'Paused'} @ {playbackRate}X
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
